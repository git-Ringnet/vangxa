<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Post;
use App\Models\Comment;
use App\Models\Group;
use Faker\Factory as Faker;
use Illuminate\Support\Facades\DB;

class GroupCommentSeeder extends Seeder
{
    /**
     * T·∫°o c√°c b√¨nh lu·∫≠n cho b√†i vi·∫øt trong nh√≥m Vangxa
     */
    public function run()
    {
        $faker = Faker::create('vi_VN');
        
        // L·∫•y c√°c b√†i vi·∫øt thu·ªôc c√°c nh√≥m Vangxa
        $posts = Post::whereNotNull('group_id')
                     ->whereHas('group', function($query) {
                         $query->where('name', 'like', 'Vangxa%');
                     })
                     ->get();
        
        if ($posts->isEmpty()) {
            $this->command->error('Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt n√†o trong c√°c nh√≥m Vangxa. H√£y ch·∫°y GroupPostSeeder tr∆∞·ªõc!');
            return;
        }
        
        $commentCount = 0;
        
        foreach ($posts as $post) {
            // L·∫•y danh s√°ch th√†nh vi√™n trong nh√≥m c·ªßa b√†i vi·∫øt
            $groupMembers = DB::table('group_members')
                ->where('group_id', $post->group_id)
                ->pluck('user_id')
                ->toArray();
                
            if (empty($groupMembers)) {
                continue;
            }
            
            // M·ªói b√†i vi·∫øt c√≥ 0-15 b√¨nh lu·∫≠n
            $commentsPerPost = rand(0, 10);
            
            // M·ªôt s·ªë b√†i vi·∫øt ph·ªï bi·∫øn c√≥ nhi·ªÅu b√¨nh lu·∫≠n h∆°n
            if (rand(1, 10) <= 2) {
                $commentsPerPost = rand(5, 10); // 20% b√†i vi·∫øt c√≥ 20-40 b√¨nh lu·∫≠n
            }
            
            // T·∫°o c√°c b√¨nh lu·∫≠n
            for ($i = 0; $i < $commentsPerPost; $i++) {
                // Ch·ªçn ng·∫´u nhi√™n m·ªôt th√†nh vi√™n l√†m ng∆∞·ªùi b√¨nh lu·∫≠n
                $commenterId = $groupMembers[array_rand($groupMembers)];
                
                // T·∫°o n·ªôi dung b√¨nh lu·∫≠n
                $commentContent = '';
                $commentType = rand(1, 4);
                
                switch ($commentType) {
                    case 1: // Ng·∫Øn
                        $commentContent = $faker->sentence(rand(3, 8));
                        break;
                    case 2: // V·ª´a
                        $commentContent = $faker->paragraph(rand(1, 2));
                        break;
                    case 3: // D√†i
                        $commentContent = $faker->paragraphs(rand(1, 3), true);
                        break;
                    case 4: // C·∫£m x√∫c
                        $emotions = ['‚ù§Ô∏è', 'üëç', 'üòç', 'üî•', 'üëè', 'üòä', 'üôå', 'üíØ', 'ü•∞', '‚ù§Ô∏è‚Äçüî•'];
                        $commentContent = $faker->sentence(rand(2, 5)) . ' ' . $emotions[array_rand($emotions)];
                        break;
                }
                
                // X√°c ƒë·ªãnh xem ƒë√¢y c√≥ ph·∫£i l√† tr·∫£ l·ªùi cho b√¨nh lu·∫≠n kh√°c kh√¥ng
                $parentId = null;
                if ($i > 0 && rand(1, 4) <= 1) { // 25% b√¨nh lu·∫≠n l√† tr·∫£ l·ªùi
                    // L·∫•y m·ªôt b√¨nh lu·∫≠n ƒë√£ t·ªìn t·∫°i c·ªßa b√†i vi·∫øt n√†y
                    $existingComment = Comment::where('post_id', $post->id)
                        ->whereNull('parent_id') // Ch·ªâ ch·ªçn b√¨nh lu·∫≠n g·ªëc, kh√¥ng ph·∫£i tr·∫£ l·ªùi
                        ->inRandomOrder()
                        ->first();
                    
                    if ($existingComment) {
                        $parentId = $existingComment->id;
                    }
                }
                
                // T·∫°o b√¨nh lu·∫≠n
                Comment::create([
                    'content' => $commentContent,
                    'user_id' => $commenterId,
                    'post_id' => $post->id,
                    'parent_id' => $parentId,
                    'created_at' => $faker->dateTimeBetween($post->created_at, 'now'),
                    'updated_at' => now()
                ]);
                
                $commentCount++;
            }
        }
        
        $this->command->info("ƒê√£ t·∫°o {$commentCount} b√¨nh lu·∫≠n cho b√†i vi·∫øt trong c√°c nh√≥m Vangxa!");
    }
}
